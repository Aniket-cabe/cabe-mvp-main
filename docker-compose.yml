version: '3.8'

services:
  # Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cabe_arena
      POSTGRES_USER: cabe_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cabe_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/migrations.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U cabe_user -d cabe_arena']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Auth Service
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: cabe_arena
      DB_USER: cabe_user
      DB_PASSWORD: ${DB_PASSWORD:-cabe_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - '4000:4000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cabe_network

  # Tasks Service
  tasks:
    build:
      context: ./services/tasks
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4001
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: cabe_arena
      DB_USER: cabe_user
      DB_PASSWORD: ${DB_PASSWORD:-cabe_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      AUTH_SERVICE_URL: http://auth:4000
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - '4001:4001'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cabe_network

  # AI Service
  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4002
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: cabe_arena
      DB_USER: cabe_user
      DB_PASSWORD: ${DB_PASSWORD:-cabe_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      AUTH_SERVICE_URL: http://auth:4000
      TASKS_SERVICE_URL: http://tasks:4001
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - '4002:4002'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth:
        condition: service_healthy
      tasks:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cabe_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth
      - tasks
      - ai
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cabe_network

volumes:
  postgres_data:
  redis_data:

networks:
  cabe_network:
    driver: bridge
