/**
 * CaBE Arena Submission Integrity Service
 * 
 * Implements file validation, virus scanning, psychological deterrents,
 * and fraud detection for task submissions.
 */

import { supabaseAdmin } from '../lib/supabase-admin';
import logger from '../utils/logger';

// ============================================================================
// CONSTANTS
// ============================================================================

export const FILE_VALIDATION_CONFIG = {
  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB
  ALLOWED_IMAGE_TYPES: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],
  ALLOWED_DOCUMENT_TYPES: ['application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
  ALLOWED_ARCHIVE_TYPES: ['application/zip', 'application/x-rar-compressed'],
  VIRUS_SCAN_TIMEOUT: 30000, // 30 seconds
  MAX_FILES_PER_SUBMISSION: 5,
} as const;

export const FRAUD_DETECTION_CONFIG = {
  DUPLICATE_THRESHOLD: 0.8, // 80% similarity threshold
  SUSPICIOUS_PATTERNS: [
    'ai-generated',
    'chatgpt',
    'gpt-',
    'claude',
    'bard',
    'copilot',
    'generated by',
    'created by ai',
    'ai assistant',
  ],
  RAPID_SUBMISSION_THRESHOLD: 5, // submissions per hour
  UNUSUAL_ACTIVITY_THRESHOLD: 10, // submissions per day
} as const;

export const PSYCHOLOGICAL_DETERRENTS = {
  FAKE_REVIEW_MESSAGES: [
    "Our AI has detected potential AI-generated content. This submission will be manually reviewed.",
    "Multiple submissions detected from similar IP addresses. Enhanced review required.",
    "Unusual submission pattern detected. This will be reviewed by our expert team.",
    "Content similarity check in progress. Please allow 24-48 hours for review.",
    "Submission flagged for quality review. This is normal for high-value tasks.",
  ],
  INTEGRITY_WARNINGS: [
    "⚠️ AI-generated work may result in point deduction and account suspension.",
    "⚠️ Plagiarism detection is active. Ensure all work is original.",
    "⚠️ Submissions are monitored for authenticity. Be honest about your work.",
    "⚠️ False claims may result in permanent account termination.",
  ],
  CONFIRMATION_MESSAGES: [
    "I confirm this is my own original work and not generated by AI tools.",
    "I understand that submitting AI-generated content may result in penalties.",
    "I have not copied or plagiarized any existing content.",
    "I am prepared to explain my work process if requested.",
  ],
} as const;

// ============================================================================
// TYPES
// ============================================================================

export interface FileValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  fileType: string;
  fileSize: number;
  virusScanResult?: 'clean' | 'suspicious' | 'error';
}

export interface FraudDetectionResult {
  isSuspicious: boolean;
  riskScore: number; // 0-100
  flags: string[];
  recommendations: string[];
}

export interface SubmissionIntegrityResult {
  fileValidation: FileValidationResult;
  fraudDetection: FraudDetectionResult;
  integrityWarnings: string[];
  confirmationRequired: boolean;
  reviewRequired: boolean;
}

// ============================================================================
// FILE VALIDATION
// ============================================================================

/**
 * Validate file upload
 */
export async function validateFileUpload(
  file: Express.Multer.File,
  userId: string
): Promise<FileValidationResult> {
  const errors: string[] = [];
  const warnings: string[] = [];

  try {
    // Check file size
    if (file.size > FILE_VALIDATION_CONFIG.MAX_FILE_SIZE) {
      errors.push(`File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds maximum allowed size (${FILE_VALIDATION_CONFIG.MAX_FILE_SIZE / 1024 / 1024}MB)`);
    }

    // Check file type
    const allowedTypes = [
      ...FILE_VALIDATION_CONFIG.ALLOWED_IMAGE_TYPES,
      ...FILE_VALIDATION_CONFIG.ALLOWED_DOCUMENT_TYPES,
      ...FILE_VALIDATION_CONFIG.ALLOWED_ARCHIVE_TYPES,
    ] as string[];

    if (!allowedTypes.includes(file.mimetype)) {
      errors.push(`File type '${file.mimetype}' is not allowed. Allowed types: ${allowedTypes.join(', ')}`);
    }

    // Check file extension
    const fileExtension = file.originalname.split('.').pop()?.toLowerCase();
    const suspiciousExtensions = ['exe', 'bat', 'cmd', 'scr', 'pif', 'com'];
    
    if (fileExtension && suspiciousExtensions.includes(fileExtension)) {
      errors.push(`File extension '.${fileExtension}' is not allowed for security reasons`);
    }

    // Virus scan (placeholder implementation)
    const virusScanResult = await performVirusScan(file);
    if (virusScanResult === 'suspicious') {
      errors.push('File appears to be suspicious and cannot be uploaded');
    } else if (virusScanResult === 'error') {
      warnings.push('Virus scan could not be completed. File will be reviewed manually.');
    }

    // Check for duplicate files
    const isDuplicate = await checkForDuplicateFile(file, userId);
    if (isDuplicate) {
      warnings.push('Similar file has been uploaded before. Please ensure this is original work.');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      fileType: file.mimetype,
      fileSize: file.size,
      virusScanResult,
    };

  } catch (error) {
    logger.error('❌ File validation error:', { 
      error: error instanceof Error ? error.message : 'Unknown error',
      fileName: file.originalname,
      userId,
    });
    
    return {
      isValid: false,
      errors: ['File validation failed. Please try again.'],
      warnings: [],
      fileType: file.mimetype,
      fileSize: file.size,
    };
  }
}

/**
 * Perform virus scan (placeholder implementation)
 */
async function performVirusScan(file: Express.Multer.File): Promise<'clean' | 'suspicious' | 'error'> {
  try {
    // This is a placeholder implementation
    // In production, integrate with a real virus scanning service like:
    // - ClamAV
    // - VirusTotal API
    // - AWS GuardDuty
    // - Google Safe Browsing API

    // Simulate virus scan
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Check for suspicious patterns in filename
    const suspiciousPatterns = ['virus', 'malware', 'trojan', 'backdoor'];
    const fileName = file.originalname.toLowerCase();
    
    if (suspiciousPatterns.some(pattern => fileName.includes(pattern))) {
      return 'suspicious';
    }

    // Check file size for potential issues
    if (file.size === 0) {
      return 'suspicious';
    }

    // Random chance of error for testing
    if (Math.random() < 0.05) {
      return 'error';
    }

    return 'clean';

  } catch (error) {
    logger.error('❌ Virus scan error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return 'error';
  }
}

/**
 * Check for duplicate files
 */
async function checkForDuplicateFile(file: Express.Multer.File, userId: string): Promise<boolean> {
  try {
    // Get user's recent submissions
    const { data: recentSubmissions } = await supabaseAdmin
      .from('submissions')
      .select('proof_url, proof_text')
      .eq('user_id', userId)
      .gte('submitted_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()) // Last 30 days
      .limit(10);

    if (!recentSubmissions) {
      return false;
    }

    // Simple hash-based duplicate detection
    const fileHash = await calculateFileHash(file);
    
    for (const submission of recentSubmissions) {
      if (submission.proof_url && submission.proof_url.includes(fileHash)) {
        return true;
      }
    }

    return false;

  } catch (error) {
    logger.error('❌ Duplicate file check error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return false;
  }
}

/**
 * Calculate file hash (simplified)
 */
async function calculateFileHash(file: Express.Multer.File): Promise<string> {
  // In production, use a proper hashing library like crypto
  const buffer = Buffer.from(file.buffer);
  const hash = require('crypto').createHash('md5').update(buffer).digest('hex');
  return hash;
}

// ============================================================================
// FRAUD DETECTION
// ============================================================================

/**
 * Detect potential fraud in submission
 */
export async function detectFraud(
  submissionData: {
    proofText?: string;
    proofUrl?: string;
    userId: string;
    taskId: string;
  }
): Promise<FraudDetectionResult> {
  const flags: string[] = [];
  let riskScore = 0;

  try {
    // Check for AI-generated content patterns
    if (submissionData.proofText) {
      const aiPatterns = detectAIGeneratedContent(submissionData.proofText);
      if (aiPatterns.length > 0) {
        flags.push(`AI-generated content patterns detected: ${aiPatterns.join(', ')}`);
        riskScore += 30;
      }
    }

    // Check submission frequency
    const frequencyAnalysis = await analyzeSubmissionFrequency(submissionData.userId);
    if (frequencyAnalysis.isUnusual) {
      flags.push(`Unusual submission frequency: ${frequencyAnalysis.details}`);
      riskScore += 20;
    }

    // Check for duplicate content
    const duplicateCheck = await checkForDuplicateContent(submissionData);
    if (duplicateCheck.isDuplicate) {
      flags.push(`Potential duplicate content detected: ${duplicateCheck.similarity}% similarity`);
      riskScore += 40;
    }

    // Check user behavior patterns
    const behaviorAnalysis = await analyzeUserBehavior(submissionData.userId);
    if (behaviorAnalysis.isSuspicious) {
      flags.push(`Suspicious user behavior: ${behaviorAnalysis.reason}`);
      riskScore += 25;
    }

    // Generate recommendations
    const recommendations = generateFraudRecommendations(riskScore, flags);

    return {
      isSuspicious: riskScore >= 50,
      riskScore: Math.min(100, riskScore),
      flags,
      recommendations,
    };

  } catch (error) {
    logger.error('❌ Fraud detection error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return {
      isSuspicious: false,
      riskScore: 0,
      flags: ['Fraud detection temporarily unavailable'],
      recommendations: ['Manual review recommended'],
    };
  }
}

/**
 * Detect AI-generated content patterns
 */
function detectAIGeneratedContent(text: string): string[] {
  const detectedPatterns: string[] = [];
  const lowerText = text.toLowerCase();

  for (const pattern of FRAUD_DETECTION_CONFIG.SUSPICIOUS_PATTERNS) {
    if (lowerText.includes(pattern)) {
      detectedPatterns.push(pattern);
    }
  }

  // Check for overly perfect grammar and structure
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
  const avgSentenceLength = sentences.reduce((sum, s) => sum + s.length, 0) / sentences.length;
  
  if (avgSentenceLength > 150 && sentences.length > 5) {
    detectedPatterns.push('overly complex sentence structure');
  }

  // Check for repetitive patterns
  const words = text.toLowerCase().split(/\s+/);
  const wordFrequency: Record<string, number> = {};
  words.forEach(word => {
    wordFrequency[word] = (wordFrequency[word] || 0) + 1;
  });

  const maxFrequency = Math.max(...Object.values(wordFrequency));
  if (maxFrequency > words.length * 0.1) {
    detectedPatterns.push('repetitive word usage');
  }

  return detectedPatterns;
}

/**
 * Analyze submission frequency
 */
async function analyzeSubmissionFrequency(userId: string): Promise<{
  isUnusual: boolean;
  details: string;
}> {
  try {
    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

    // Get recent submissions
    const { data: recentSubmissions } = await supabaseAdmin
      .from('submissions')
      .select('submitted_at')
      .eq('user_id', userId)
      .gte('submitted_at', oneDayAgo.toISOString());

    if (!recentSubmissions) {
      return { isUnusual: false, details: '' };
    }

    const hourlySubmissions = recentSubmissions.filter(
      s => new Date(s.submitted_at) >= oneHourAgo
    ).length;

    const dailySubmissions = recentSubmissions.length;

    if (hourlySubmissions > FRAUD_DETECTION_CONFIG.RAPID_SUBMISSION_THRESHOLD) {
      return {
        isUnusual: true,
        details: `${hourlySubmissions} submissions in the last hour`,
      };
    }

    if (dailySubmissions > FRAUD_DETECTION_CONFIG.UNUSUAL_ACTIVITY_THRESHOLD) {
      return {
        isUnusual: true,
        details: `${dailySubmissions} submissions in the last 24 hours`,
      };
    }

    return { isUnusual: false, details: '' };

  } catch (error) {
    logger.error('❌ Submission frequency analysis error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return { isUnusual: false, details: '' };
  }
}

/**
 * Check for duplicate content
 */
async function checkForDuplicateContent(submissionData: {
  proofText?: string;
  proofUrl?: string;
  userId: string;
  taskId: string;
}): Promise<{
  isDuplicate: boolean;
  similarity: number;
}> {
  try {
    if (!submissionData.proofText) {
      return { isDuplicate: false, similarity: 0 };
    }

    // Get recent submissions from other users for the same task
    const { data: otherSubmissions } = await supabaseAdmin
      .from('submissions')
      .select('proof_text')
      .eq('task_id', submissionData.taskId)
      .neq('user_id', submissionData.userId)
      .not('proof_text', 'is', null)
      .limit(10);

    if (!otherSubmissions || otherSubmissions.length === 0) {
      return { isDuplicate: false, similarity: 0 };
    }

    // Calculate similarity with other submissions
    let maxSimilarity = 0;
    for (const submission of otherSubmissions) {
      if (submission.proof_text) {
        const similarity = calculateTextSimilarity(submissionData.proofText, submission.proof_text);
        maxSimilarity = Math.max(maxSimilarity, similarity);
      }
    }

    return {
      isDuplicate: maxSimilarity > FRAUD_DETECTION_CONFIG.DUPLICATE_THRESHOLD,
      similarity: maxSimilarity * 100,
    };

  } catch (error) {
    logger.error('❌ Duplicate content check error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return { isDuplicate: false, similarity: 0 };
  }
}

/**
 * Calculate text similarity (simplified)
 */
function calculateTextSimilarity(text1: string, text2: string): number {
  // In production, use a proper similarity algorithm like:
  // - Levenshtein distance
  // - Jaccard similarity
  // - Cosine similarity
  // - TF-IDF comparison

  const words1 = new Set(text1.toLowerCase().split(/\s+/));
  const words2 = new Set(text2.toLowerCase().split(/\s+/));
  
  const intersection = new Set([...words1].filter(x => words2.has(x)));
  const union = new Set([...words1, ...words2]);
  
  return intersection.size / union.size;
}

/**
 * Analyze user behavior patterns
 */
async function analyzeUserBehavior(userId: string): Promise<{
  isSuspicious: boolean;
  reason: string;
}> {
  try {
    // Get user's submission history
    const { data: submissions } = await supabaseAdmin
      .from('submissions')
      .select('status, submitted_at, proof_strength')
      .eq('user_id', userId)
      .order('submitted_at', { ascending: false })
      .limit(50);

    if (!submissions || submissions.length === 0) {
      return { isSuspicious: false, reason: '' };
    }

    // Check for suspicious patterns
    const rejectedCount = submissions.filter(s => s.status === 'rejected').length;
    const totalCount = submissions.length;
    const rejectionRate = rejectedCount / totalCount;

    if (rejectionRate > 0.5 && totalCount > 5) {
      return {
        isSuspicious: true,
        reason: `High rejection rate: ${(rejectionRate * 100).toFixed(1)}%`,
      };
    }

    // Check for rapid submissions with low proof strength
    const lowProofSubmissions = submissions.filter(s => s.proof_strength === 0).length;
    if (lowProofSubmissions > totalCount * 0.7) {
      return {
        isSuspicious: true,
        reason: 'High percentage of low-proof submissions',
      };
    }

    return { isSuspicious: false, reason: '' };

  } catch (error) {
    logger.error('❌ User behavior analysis error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    return { isSuspicious: false, reason: '' };
  }
}

/**
 * Generate fraud detection recommendations
 */
function generateFraudRecommendations(riskScore: number, flags: string[]): string[] {
  const recommendations: string[] = [];

  if (riskScore >= 70) {
    recommendations.push('Immediate manual review required');
    recommendations.push('Consider temporary account suspension');
  } else if (riskScore >= 50) {
    recommendations.push('Enhanced review recommended');
    recommendations.push('Monitor user activity closely');
  } else if (riskScore >= 30) {
    recommendations.push('Standard review process');
    recommendations.push('Flag for follow-up monitoring');
  } else {
    recommendations.push('Normal processing');
  }

  if (flags.some(f => f.includes('AI-generated'))) {
    recommendations.push('Request detailed work process explanation');
  }

  if (flags.some(f => f.includes('duplicate'))) {
    recommendations.push('Compare with other submissions');
  }

  return recommendations;
}

// ============================================================================
// PSYCHOLOGICAL DETERRENTS
// ============================================================================

/**
 * Generate psychological deterrents for submission
 */
export function generatePsychologicalDeterrents(
  fraudResult: FraudDetectionResult
): {
  warnings: string[];
  confirmationMessages: string[];
  fakeReviewMessage?: string;
} {
  const warnings: string[] = [];
  const confirmationMessages: string[] = [];

  // Add integrity warnings
  warnings.push(...PSYCHOLOGICAL_DETERRENTS.INTEGRITY_WARNINGS);

  // Add confirmation messages
  confirmationMessages.push(...PSYCHOLOGICAL_DETERRENTS.CONFIRMATION_MESSAGES);

  // Add fake review message if suspicious
  let fakeReviewMessage: string | undefined;
  if (fraudResult.isSuspicious) {
    fakeReviewMessage = PSYCHOLOGICAL_DETERRENTS.FAKE_REVIEW_MESSAGES[
      Math.floor(Math.random() * PSYCHOLOGICAL_DETERRENTS.FAKE_REVIEW_MESSAGES.length)
    ];
  }

  return {
    warnings,
    confirmationMessages,
    fakeReviewMessage,
  };
}

// ============================================================================
// MAIN INTEGRITY SERVICE
// ============================================================================

/**
 * Complete submission integrity check
 */
export async function performSubmissionIntegrityCheck(
  submissionData: {
    files?: Express.Multer.File[];
    proofText?: string;
    proofUrl?: string;
    userId: string;
    taskId: string;
  }
): Promise<SubmissionIntegrityResult> {
  try {
    // File validation
    const fileValidation: FileValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
      fileType: '',
      fileSize: 0,
    };

    if (submissionData.files && submissionData.files.length > 0) {
      for (const file of submissionData.files) {
        const validation = await validateFileUpload(file, submissionData.userId);
        if (!validation.isValid) {
          fileValidation.isValid = false;
          fileValidation.errors.push(...validation.errors);
        }
        fileValidation.warnings.push(...validation.warnings);
      }
    }

    // Fraud detection
    const fraudDetection = await detectFraud(submissionData);

    // Generate psychological deterrents
    const deterrents = generatePsychologicalDeterrents(fraudDetection);

    // Determine if review is required
    const reviewRequired = fraudDetection.isSuspicious || 
                          !fileValidation.isValid || 
                          fraudDetection.riskScore >= 50;

    return {
      fileValidation,
      fraudDetection,
      integrityWarnings: deterrents.warnings,
      confirmationRequired: true,
      reviewRequired,
    };

  } catch (error) {
    logger.error('❌ Submission integrity check error:', { error: error instanceof Error ? error.message : 'Unknown error' });
    
    return {
      fileValidation: {
        isValid: false,
        errors: ['Integrity check failed. Please try again.'],
        warnings: [],
        fileType: '',
        fileSize: 0,
      },
      fraudDetection: {
        isSuspicious: false,
        riskScore: 0,
        flags: ['Integrity check unavailable'],
        recommendations: ['Manual review recommended'],
      },
      integrityWarnings: [...PSYCHOLOGICAL_DETERRENTS.INTEGRITY_WARNINGS],
      confirmationRequired: true,
      reviewRequired: true,
    };
  }
}

// ============================================================================
// EXPORTS
// ============================================================================

export default {
  FILE_VALIDATION_CONFIG,
  FRAUD_DETECTION_CONFIG,
  PSYCHOLOGICAL_DETERRENTS,
  validateFileUpload,
  detectFraud,
  generatePsychologicalDeterrents,
  performSubmissionIntegrityCheck,
};
