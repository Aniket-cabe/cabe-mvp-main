name: CaBE Arena CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level=moderate
          pnpm run security:audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # ============================================================================
  # LINTING & TYPE CHECKING
  # ============================================================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint frontend
        run: |
          cd frontend
          pnpm run lint
          pnpm run type-check
          pnpm run format:check

      - name: Lint backend
        run: |
          cd backend
          pnpm run lint
          pnpm run type-check
          pnpm run format:check

      - name: Check formatting
        run: |
          pnpm run format:check

  # ============================================================================
  # TESTING
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: Frontend Tests
            directory: frontend
            command: test
          - name: Backend Tests
            directory: backend
            command: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.name }}
        run: |
          cd ${{ matrix.directory }}
          pnpm run ${{ matrix.command }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.directory }}/coverage
          flags: ${{ matrix.name }}
          name: ${{ matrix.name }}

  # ============================================================================
  # E2E TESTING
  # ============================================================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cabe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp backend/env.example backend/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/cabe_test" >> backend/.env.test

      - name: Start backend server
        run: |
          cd backend
          pnpm run build
          pnpm start &
          sleep 10

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          headed: false
          record: false
          parallel: false
          group: 'Actions example'
          spec: cypress/e2e/*.cy.ts
          wait-on: 'http://localhost:3001/health'

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore

      - name: Upload videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore

  # ============================================================================
  # BUILD & BUNDLE ANALYSIS
  # ============================================================================
  build:
    name: Build & Analyze
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd frontend
          pnpm run build

      - name: Build backend
        run: |
          cd backend
          pnpm run build

      - name: Analyze bundle size
        run: |
          cd frontend
          pnpm run analyze

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            frontend/dist
            backend/dist
          retention-days: 7

      - name: Check bundle size
        run: |
          cd frontend
          node scripts/check-bundle-size.js

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start backend server
        run: |
          cd backend
          pnpm start &
          sleep 10

      - name: Start frontend server
        run: |
          cd frontend
          pnpm run preview &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          cd frontend
          pnpm run lighthouse

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: frontend/.lighthouseci/
          retention-days: 30

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run load-tests/load-test.yml

  # ============================================================================
  # ACCESSIBILITY TESTING
  # ============================================================================
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start frontend server
        run: |
          cd frontend
          pnpm run preview &
          sleep 10

      - name: Run axe-core tests
        run: |
          cd frontend
          pnpm run accessibility

      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: frontend/accessibility-report.json
          retention-days: 30

  # ============================================================================
  # DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [performance, accessibility]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance, accessibility]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production..."
          # Add smoke test logic here

      - name: Notify deployment
        run: |
          echo "Deployment completed successfully!"
          # Add notification logic here
